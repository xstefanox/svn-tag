#!/bin/bash

# Automatically create a new release of a software versioned under a Subversion repository
#
# @param $1 The selected tag that will be created
#
function svn-tag()
{
    local tag=$1
    local current_tag
    local trunk_list
    local current_tag_list
    local files_diff
    
    # ensure tag is not empty
    [[ -z "${tag}" ]] && echo "Usage: svn-tag <tag>" && return 1

    # check if we are in a svn working copy with a standard layout
    dirs="$(find . -mindepth 1 -maxdepth 1 -not -name .svn)"
    [[ -z "$(echo "$dirs" | grep \./trunk)" || -z "$(echo "$dirs" | grep \./branches)" || -z "$(echo "$dirs" | grep \./tags)" ]] && echo "The current directory is not a Subversion working copy with a standard layout" && return 1
    [[ "$(echo "${dirs}" | wc -l)" -gt 3 ]] && echo "Unknown files or directories in the current directory, unable to proceed" && return 1
    unset dirs
    
    # check if trunk has local modifications
    [[ -n "$(svn status trunk)" ]] && echo "Trunk has local modifications, commit or revert them before releasing" && return 1

    # check if the given tag is a valid semver tag
    [[ -z "$(echo "${tag}" | grep "^[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+$")" ]] && echo "Invalid semver tag: ${tag}" && return 1

    # ensure ^/tags/ is updated
    svn update tags

    # read the last released version
    current_tag="$(find tags -mindepth 1 -maxdepth 1 | sort | sed -n '$ s:tags/:: p')"
    
    # if this is a first release
    if [[ -z "${current_tag}" ]]
    then
    
        svn copy trunk "tags/${tag}" && svn commit -m "Version ${tag}"
        
    else
    
        # check if the given tag is greater than the last existing tag
        [[ "${tag}" < "${current_tag}" ]] && echo "You must provide a tag greater than ${current_tag}" && return 1
        
        # check if the given tag already exists
        [[ "${tag}" == "${current_tag}" ]] && echo "Tag ${current_tag} already exists" && return 1
        
        # create a list of files currently in trunk
        trunk_list="$(mktemp -t svn-release.XXXXXXXXXX)"
        find trunk -mindepth 1 | sed 's:^trunk/::' > "${trunk_list}"

        # create a list of files currently in the latest tag
        current_tag_list="$(mktemp -t svn-release.XXXXXXXXXX)"
        find "tags/${current_tag}" -mindepth 1 | sed 's:tags/'${current_tag}'/::' > "${current_tag_list}"

        # check if there are actually differences between the two lists of files
        files_diff="$(diff "${trunk_list}" "${current_tag_list}")"
        rm "${trunk_list}" "${current_tag_list}"

        # check if trunk and the latest tag contain the same files with the same content
        if [[ -z "$(diff -r trunk "tags/${current_tag}")" ]] && [[ -z "${files_diff}" ]]
        then
            echo "No differences between trunk and the current release, refusing to release a useless version" && return 1
        fi
        
        # create the release
        svn copy "tags/${current_tag}" "tags/${tag}" && \
        svn rm tags/${tag}/* && \
        cp -r trunk/* "tags/${tag}/" && \
        svn add tags/${tag}/* && \
        svn commit -m "Version ${tag}"
    fi
}

svn-tag $@

